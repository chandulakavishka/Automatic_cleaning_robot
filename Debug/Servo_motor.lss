
Servo_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006aa  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b0  00000000  00000000  00000876  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000294  00000000  00000000  00000e26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000328  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f9  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001511  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <servo>:
	}           //3 -  90  
	
}
void servo(unsigned char x)
{
	DDRD |= (1<<PD7);
  6c:	91 b3       	in	r25, 0x11	; 17
  6e:	90 68       	ori	r25, 0x80	; 128
  70:	91 bb       	out	0x11, r25	; 17
	TCNT1 = 0;
  72:	1d bc       	out	0x2d, r1	; 45
  74:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 2499;
  76:	23 ec       	ldi	r18, 0xC3	; 195
  78:	39 e0       	ldi	r19, 0x09	; 9
  7a:	37 bd       	out	0x27, r19	; 39
  7c:	26 bd       	out	0x26, r18	; 38
	TCCR2 = (1<<WGM11)|(1<<COM1A1);
  7e:	92 e8       	ldi	r25, 0x82	; 130
  80:	95 bd       	out	0x25, r25	; 37
	TCCR2 = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
  82:	9b e1       	ldi	r25, 0x1B	; 27
  84:	95 bd       	out	0x25, r25	; 37
	
	if(x==1){
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	59 f4       	brne	.+22     	; 0xa0 <servo+0x34>
		OCR2 = 65;//if ultrasonic sensor give signal 1 servo goes to -90 digrees
  8a:	91 e4       	ldi	r25, 0x41	; 65
  8c:	93 bd       	out	0x23, r25	; 35
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	2f ef       	ldi	r18, 0xFF	; 255
  90:	3e e9       	ldi	r19, 0x9E	; 158
  92:	94 e2       	ldi	r25, 0x24	; 36
  94:	21 50       	subi	r18, 0x01	; 1
  96:	30 40       	sbci	r19, 0x00	; 0
  98:	90 40       	sbci	r25, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <servo+0x28>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <servo+0x32>
  9e:	00 00       	nop
		_delay_ms(1500);
	}
	if(x==2){
  a0:	82 30       	cpi	r24, 0x02	; 2
  a2:	59 f4       	brne	.+22     	; 0xba <servo+0x4e>
		OCR2 = 175;//if ultrasonic sensor give signal 2 servo goes to 0 digrees
  a4:	9f ea       	ldi	r25, 0xAF	; 175
  a6:	93 bd       	out	0x23, r25	; 35
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	3e e9       	ldi	r19, 0x9E	; 158
  ac:	94 e2       	ldi	r25, 0x24	; 36
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	30 40       	sbci	r19, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <servo+0x42>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <servo+0x4c>
  b8:	00 00       	nop
		_delay_ms(1500);
	}
	if(x==3){
  ba:	83 30       	cpi	r24, 0x03	; 3
  bc:	59 f4       	brne	.+22     	; 0xd4 <servo+0x68>
		OCR2 = 300;//if ultrasonic sensor give signal 13 servo goes to 90 digrees
  be:	8c e2       	ldi	r24, 0x2C	; 44
  c0:	83 bd       	out	0x23, r24	; 35
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	3e e9       	ldi	r19, 0x9E	; 158
  c6:	84 e2       	ldi	r24, 0x24	; 36
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	30 40       	sbci	r19, 0x00	; 0
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <servo+0x5c>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <servo+0x66>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <main>:
int main(void)
{
	while (1)
	{
		
		servo(1);//ultrasonic signal
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	0e 94 36 00 	call	0x6c	; 0x6c <servo>
  dc:	fc cf       	rjmp	.-8      	; 0xd6 <main>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
